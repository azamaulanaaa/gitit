name: Release Docker Image
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch: # Allows manual triggering of the workflow

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
  image-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/gitit
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Find Dockerfiles for variants
        id: find_dockerfiles
        run: |
          # Find all Dockerfiles under examples/ and output them as a JSON array
          DOCKERFILES=$(find examples -name "Dockerfile" -print0 | xargs -0 -I {} basename -s /Dockerfile {} | jq -R -s -c 'split("\n")[:-1]')
          echo "dockerfiles=$DOCKERFILES" >> $GITHUB_OUTPUT

      - name: Build and push variant images
        if: steps.find_dockerfiles.outputs.dockerfiles != '[]'
        run: |
          # Loop through each variant found
          for VARIANT in $(echo "${{ steps.find_dockerfiles.outputs.dockerfiles }}" | jq -r '.[]'); do
            echo "Processing variant: $VARIANT"
            VARIANT_PATH="examples/$VARIANT"
            TAG="${VARIANT}-${{ steps.get_version.outputs.VERSION }}"

            echo "Building image for ${VARIANT} with tag: ${TAG}"
            docker buildx build \
              --push \
              --platform linux/amd64,linux/arm64 \
              --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG} \
              --file "${VARIANT_PATH}/Dockerfile" \
              "${VARIANT_PATH}"
          done
